[
  {
    "objectID": "StartCodingToday_Eng.html#sec-CourseOverview",
    "href": "StartCodingToday_Eng.html#sec-CourseOverview",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "1.1 Course Overview",
    "text": "1.1 Course Overview\nThroughout this course, you will:\n\nSet up GitHub: Learn how to create a GitHub account, install GitHub Desktop, and configure Git for version control.\nCreate a Python Environment: Install Python, set up Visual Studio Code (VS Code), and configure your terminal and Python environment.\nCreate a Python Script: Write and execute Python code using Jupyter Notebook within VS Code, and learn essential coding practices.\nCreate Web Apps with Onecode: Transform your Jupyter Notebook into a Python script, prepare your project for Onecode, and add necessary components like inputs, outputs, and buttons.\nDeploy a Web App using Onecode: Deploy your web application and make it accessible to users."
  },
  {
    "objectID": "StartCodingToday_Eng.html#sec-CourseMaterials",
    "href": "StartCodingToday_Eng.html#sec-CourseMaterials",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "1.2 Course Materials",
    "text": "1.2 Course Materials\nTo facilitate your learning, we have provided several files that you will use throughout the course. These files are available below:\n\n\n\n\n\n\n\n\nStep\nFile Name\nFunction\n\n\n\n\nStep 1\nGitHub Desktop\nGitHub standalone executive file\n\n\n\nGit\nGit standalone executive file\n\n\nStep 2\nPython 3.10\nPython 3.10 executive file\n\n\n\nVSCode\nVisual Code Basic standalone executive file\n\n\nStep 3\ncollar.csv\nDataset for testing\n\n\n\nmerged_data.csv\n\n\n\n\nStriplog.ipynb\nJupyter Notebook file created during Step 2\n\n\n\nStriplog.py\nPython file created from the Jupyter Notebook\n\n\nStep 4\nStriplog_OneCode.zip\nOneCode folder tree\n\n\n\nBy the end of this course, you will have a solid foundation in coding and web app development, equipped with the skills to create and deploy your own applications. Let’s get started!"
  },
  {
    "objectID": "StartCodingToday_Eng.html#setting-up-an-account",
    "href": "StartCodingToday_Eng.html#setting-up-an-account",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "2.1 Setting up an account",
    "text": "2.1 Setting up an account\nTo get started with GitHub, follow these steps:\n\nGo to pythonGitHub and Sign up.\n\n\n\nEnter your email address (either professional or personal).\nCreate a password.\nChoose a username."
  },
  {
    "objectID": "StartCodingToday_Eng.html#install-github-desktop",
    "href": "StartCodingToday_Eng.html#install-github-desktop",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "2.2 Install GitHub Desktop",
    "text": "2.2 Install GitHub Desktop\nNext, you need to install GitHub Desktop:\n\nDownload GitHub Desktop (see Section 1.2)\nAt the root of your C:/ drive, create a folder named pythonGitHub. This folder will contain all your repositories corresponding to your codes.\nOpen GitHub Desktop and click on Create a New Repository on your local drive….\n\n\n\nFill out the form as follows and click on Create Repository.\n\n\nThis will create a folder named “Striplog” in the “pythonGitHub” folder and generate two files: - .gitattributes which initializes GitHub. - README.md which contains the description of your repository.\nThis setup will allow us to interact with your GitHub account.\n\n\nTo publish the folder on GitHub, click on Publish repository. Sign in to your GitHub account and follow the steps.\n\n\n\nNow, connect online to your GitHub account, click on your profile image, and select Your repositories. You should see your Striplog repository."
  },
  {
    "objectID": "StartCodingToday_Eng.html#install-git",
    "href": "StartCodingToday_Eng.html#install-git",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "2.3 Install Git",
    "text": "2.3 Install Git\nTo install Git, follow these steps:\n\nDownload Git (see Section 1.2)\nDuring the setup, make sure to select the option Unix tools from the Command Prompt."
  },
  {
    "objectID": "StartCodingToday_Eng.html#installing-python",
    "href": "StartCodingToday_Eng.html#installing-python",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "3.1 Installing Python",
    "text": "3.1 Installing Python\nPython is commonly used by geologists due to the numerous libraries available for geology-related tasks, many of which are open-source. However, the extensive use of libraries means that code often needs to be updated as libraries are updated.\nFor this course, we will install Python 3.10 because some of the libraries we will use (see 3.4.2 Installing Libraries) require Python 3.10. Note that newer versions of Python are available.\n\nDownload Python 3.10 (see Section 1.2)\nRun the installer .exe.\nMake sure to check the box Add Python 3.10 to PATH before clicking Customize Installation. This step is crucial as it makes Python accessible from the command line.\nCustomize the install location by creating a new folder at the root of your C:/ drive named “Python310”. The closer to the root, the easier it will be to find it.\nClick on Disable path length limit and then Close.\n\n\n\n\n\n\n\n\nNote\n\n\n\nNew versions of Python are available every year. You will eventually need to upgrade your Python as libraries are updated. However, be cautious with updates, as they can take time depending on the library. Updating Python too soon can make your scripts obsolete, requiring time to update your scripts to work properly again. This is why some expert coders prefer to use a more raw language like “R”."
  },
  {
    "objectID": "StartCodingToday_Eng.html#setting-up-visual-studio-code",
    "href": "StartCodingToday_Eng.html#setting-up-visual-studio-code",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "3.2 Setting up Visual Studio Code",
    "text": "3.2 Setting up Visual Studio Code\n\n3.2.1 Installing Visual Studio Code\nWe will install Visual Studio Code (VS Code), a free, open-source, powerful code editor that runs on your desktop and is available for Windows, macOS, and Linux. It comes with built-in support for several languages, including Python.\n\nDownload Visual Studio code (see Section 1.2)\n\n\n\n\n\n\n\n\nNote\n\n\n\nYou might hear about Anaconda which is a distribution of Python and R programming languages designed for scientific computing and data science. It simplifies package management and deployment. It is free and was largely used across SRK but as of October 2020, Anaconda’s licensing terms have changed, restricting the use of the Anaconda Individual Edition for enterprises with more than 200 employees.\n\n\n\n\n3.2.2 Overview of the Interface of Visual Studio Code\nVisual Studio Code offers a user-friendly interface with various functionalities accessible from the left side of the window:\n\n\nExplorer: Access your repositories and files.\nSearch: Search for keywords and occurrences within your repositories.\nSource Control: Synchronize your repository with GitHub.\nRun and Debug: Execute and debug your code.\nExtensions: Install various extensions to personalize your VS Code experience.\n\nYou can also change the color scheme of your interface to suit your preferences.\n\nIn VS Code, go to File > Preferences > Color Theme\nSelect a theme in the window that opens.\n\n\n\n\n3.2.3 Installing Extensions\nMany extensions are available for VS Code. Click on the icon on the left of the screen, and in the search bar enter:\n\nPython and Python Extension Pack in order for VS Code to read Python.\n\n\n\nJupyter: Click on the first one and click on Install. It will automatically install four additional extensions as a pack. This extension will allow us to use Jupyter Notebook inside the VS Code environment.\n\n\n\nVscode-icons: This extension allows you to see familiar icons for CSV, text, Jupyter Notebook, etc., in the explorer window, providing a better initial view instead of relying only on file extensions.\n\n\n\nGitHub repositories: This extension allows you to quickly browse, search, edit, and commit to GitHub directly from Visual Studio Code."
  },
  {
    "objectID": "StartCodingToday_Eng.html#configure-the-terminal",
    "href": "StartCodingToday_Eng.html#configure-the-terminal",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "3.3 Configure the Terminal",
    "text": "3.3 Configure the Terminal\nYou can access the terminal at the top of the window and select New terminal, which will open at the bottom. Alternatively, use the shortcut CTRL+.\n\nMake sure to select Command Prompt, and set it as the default because note that if you close the terminal window, you will revert to Powershell and the environment will not be activated. To save time, follow this tip:\n\nIn the terminal window that opened at the bottom of the screen, click on the arrow to the right of the plus sign and select Select Default Profile\nAt the top of the screen, enter command and select Command Prompt"
  },
  {
    "objectID": "StartCodingToday_Eng.html#setting-up-an-environment",
    "href": "StartCodingToday_Eng.html#setting-up-an-environment",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "3.4 Setting up an Environment",
    "text": "3.4 Setting up an Environment\n\n3.4.1 Creating a Python Environment\nEach time you want to run a Python script, Visual Studio will ask you to specify the environment. The environment will include all the libraries necessary to run the script. You can update it through the terminal anytime you need to, and we will do it throughout this course.\n\nIn the terminal navigate to your project directory using the command cd.\n\ncd C:/Github\n\nTo create the virtual environment, enter the following line:\n\npython -m venv .base\nor if you already have another python versions installed on your computer you should use the following:\npy – 3.10 -m venv .base\n.base is the name of the new environment. If you need to create another one in the future, use the same methodology with a different name.\n\nTo activate the environment, enter:\n\n.\\.base\\Scripts\\activate\nYou will see the environment is activated as you see before you code line (.base)\n\n\n\n\n\n\n\nNote\n\n\n\nIf you encounter an error ‘Python cannot be found’, you may need to add Python to your system’s PATH manually. Open the Start menu and search for ‘Environment Variables’. Select ‘Edit the system environment Variables’. In the System Properties window, click the “Environment Variables…” button.\n\n\nClick “New” and add the path to your Python installation directory C:\\Python310.\n\n\n3.4.2 Installing libraries\nIn your environment, we will install all necessary libraries for the code. The most common are described below.\n\nJupyter: Part of the Jupyter Project, an open-source initiative focused on interactive computing. It provides tools for creating and sharing documents that contain live code, equations, visualizations, and narrative text. It supports various programming languages, including Python, R, and Julia, through different kernels.\nIPython Kernel: A Jupyter kernel for Python, allowing Jupyter notebooks to run Python code. It provides the interface between Jupyter frontends (such as Jupyter Notebook, JupyterLab, and other interactive computing tools) and the Python execution environment.\nPandas: A library used primarily for data manipulation and analysis. It provides data structures and functions that make it easy to manipulate large or complex data sets, particularly with its powerful DataFrame and Series objects. It’s widely used in data science, finance, and many forms of analytics where data cleaning and preparation are critical.\nNumpy: Fundamental for scientific computing with Python. It provides support for large, multi-dimensional arrays and matrices, along with a large collection of high-level mathematical functions to operate on these arrays. This library is used extensively in areas that require numerical computations, such as simulations, statistical analysis, and machine learning.\nMatplotlib: A plotting library for the Python programming language and its numerical mathematics extension NumPy. It provides an object-oriented API for embedding plots into applications using general-purpose GUI toolkits like Tkinter, wxPython, Qt, or GTK. Some specific modules within Matplotlib include:\n\n.pyplot: A module in Matplotlib that provides a MATLAB-like interface. It is stateful, meaning it keeps track of the current figure and plotting area, and the plotting functions are directed to the current axes.\n.patches: This module allows for more fine-grained control over the shapes which can be drawn, with classes like Rectangle and Circle which can be added to plots to represent data graphically, often used for annotations or highlighting specific data.\n.gridspec: Used for specifying the geometry of the grid that a subplot will be placed on. This can be used to create layouts where subplots have varying sizes.\n.lines: This module allows you to customize the properties of lines in a plot, such as the line style, width, and colour. It’s useful for enhancing the visual distinctions between multiple data sets on the same plot.\n\n\nTo install these libraries, enter the following commands in the terminal:\n\nInstall Pandas:\n\npip install pandas\n\n\nInstall the Jupyter library:\n\npip install jupyter\n\nInstall the Ipython Kernel library:\n\npip install ipykernel\n\nInstall the Matplolib library\n\npip install matplotlib\nYour environment is now set, you can install new library at any time using the command pip install.\n\nRestart VS Code."
  },
  {
    "objectID": "StartCodingToday_Eng.html#explorer",
    "href": "StartCodingToday_Eng.html#explorer",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "3.5 Explorer",
    "text": "3.5 Explorer\nYou will need to access your Github folder from VS Code. Go to the tab Explorer and select Open Folder, navigate to your local Github folder. You will now see your folder Striplog and the .base that corresponds to the environment."
  },
  {
    "objectID": "StartCodingToday_Eng.html#introduction-to-jupyter-notebook",
    "href": "StartCodingToday_Eng.html#introduction-to-jupyter-notebook",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "4.1 Introduction to Jupyter Notebook",
    "text": "4.1 Introduction to Jupyter Notebook\nJupyter Notebook is a useful tool for testing and visualizing each portion of your code. It allows you to quickly make your code comprehensible, which is helpful if you need to share the code or if time will pass before you use it again. For this part, we will use Jupyter Notebook.\n\n4.1.1 Creating a Jupyter Notebook in VS Code\n\nRight-click on the Striplog folder in the Explorer window and select New File.\n\n\n\nRename the file Striplog.ipynb. The extension is important as it will automatically define the type of file.\nClick on your new file.\n\n\n\n\n4.1.2 Select a Kernel\n\nOn the top right of the VS Code window, click on Python 3.10.11.\n\n\n\nClick on Select Another Kernel\n\n\n\nClick on Python Environments\n\n\n\nSelect .base. You should now see the Kernel used:\n\n\n\n4.1.3 Keyboard shortcuts in Jupyter Notebook\n\n\n\n\n\n\n\nKeyboard shortcut\nAction\n\n\n\n\nCTRL+ENTER\nRun the cell\n\n\nESC + dd\nDelete the cell\n\n\nESC+A\nAdd a cell above\n\n\nESC+B\nAdd a cell below\n\n\n\n\n\n4.1.4 Markdown vs. Code\nMarkdown allows us to create a report-like code that will facilitate the sharing process. A few things to remember for formatting in Jupyter Notebook:\n# Heading Level 1\n## Heading Level 2\n### Heading Level 3\n#### Heading Level 4\n\n**Bold text**\n\n*Italic text*\n\n- Bulleted item\n- Bulleted item\n\n1. Numbered item\n2. Numbered item\n\n***\n\n\nFirst, make sure your cell is in Markdown mode. You should see it in the bottom right corner of the cell:\nEnter you title and a short description of the project. For example:\n\n## Striplog app\n\nThis app aims to facilitate quick visualization of drillhole data\n\n\nSelect Run all or CTRL+ENTER.\n\n\nThis facilitates explanation within the code.\n\nNow let’s enter a line of code: hover over the first cell and click on +code or use the keyboard shortcut b (make sure you are not editing the cell, use the Esc key).\n\n\n\n\n4.1.5 Import Libraries\nIn any python code, you will need to import the libraries in your code even if you already install them in your environment.\n#Import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nfrom matplotlib.gridspec import GridSpec\nimport matplotlib.lines as mlines\n\nClick on the cell and press CTRL+ENTER or click at the top on Run all. If all libraries have been successfully imported, you should see a green check sign:"
  },
  {
    "objectID": "StartCodingToday_Eng.html#writing-the-code",
    "href": "StartCodingToday_Eng.html#writing-the-code",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "4.2 Writing the code",
    "text": "4.2 Writing the code\nLet’s start on the code, code you can use as many cells as you need and run them separately to check for errors.\n\n4.2.1 Input files\nFirst, we will import the needed files, we need the collar for the HoleID linked to the depth_max. For this exercise it will be easier to copy the data files into the Striplog folder. Navigate to C:/Github/Striplog and copy the data folder provided with this course StartCodingToday/Step3/data. This folder contains two CSV files:\n\ncollar.csv\nmerge_data.csv\n\n\n\nCreate a new cell in your Jupyter Notebook.\n\n# Load collar data to get max depths for each hole\ncollar_data = pd.read_csv('./data/collar.csv')\n\n\n\n\n\n\nNote\n\n\n\n./ indicate a path relative to the location of the Striplog.ipynb file. ./data means it will locate the collar.csv in C:/Github/Striplog/data path.\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn cells that are code and not markdown, you can easily add explanations using #.\n\n\n\nThen we will import the interval data:\n\n# Print the headers of the merged table\nmerged_data=pd.read_csv('./data/merged_data.csv')\n\nIf you want to see the columns names of the table, enter:\n\nprint(merged_data.columns.tolist())\n\n\nIf you want to see the first rows:\n\nprint(merged_data.head())\n\n\nIn the dataset, the missing values are marked by ‘-99’. For this script, we want to clean the data and replace -99 by NaN.\n\nmerged_data = merged_data.replace(-99, np.NaN)\nmerged_data = merged_data.replace('-99', np.NaN)\n\nCTRL+ENTER\n\n\n\n\n4.2.2 Assign Values\nIt is very important to name each value in order to properly call them on afterwards. merged_data refers to the table we previously imported.\n#Assign values\nlithology=merged_data['Litologia']\nalteration=merged_data['Alteracion']\n\n#List the parameters to plot\nparameters=['FFEspaciamiento','RqdRQD','CUS','MO','CUFE']\n\n\n4.2.3 Creating a Color Map\nNote that as we are using the matplotlib library, there is a CSS colors associated with this library. So you can use them.\n\n\nLet’s print the headers of the csv tables in order to visualised the parameters that we want to visualised.\n\n#Create a color map for the parameters\n\ncmap_parameters = {\n    'PP_MINTYPE_calculadoPtXt': 'deepskyblue',\n    'AG': 'dodgerblue',\n    'AS': 'gold',\n    'Au_ppb_BEST': 'yellowgreen',\n    'ClT_kgt_BEST': 'lightcoral',\n    'CO3_pct_BEST': 'mediumseagreen',\n    'CUCN': 'darkcyan',\n    'CUFE': 'firebrick',\n    'CUS': 'indianred',\n    'CUT': 'chocolate',\n    'FE': 'saddlebrown',\n    'FET': 'peru',\n    'MO': 'mediumpurple',\n    'PP_AS_PP': 'orchid',\n    'PP_CC_2CSR': 'plum',\n    'PP_CC_PP': 'violet',\n    'PP_COV_2CSR': 'thistle',\n    'PP_COV_PP': 'lavender',\n    'PP_CPY_2CSR': 'slateblue',\n    'PP_CPY_PP': 'mediumslateblue',\n    'PY_BEST': 'royalblue',\n    'S': 'steelblue',\n    'S2': 'skyblue',\n    'FFEspaciamiento': 'deepskyblue',\n    'FFNumFracAb30Grad': 'darkorange',\n    'FFNumFracAb60Grad': 'orange',\n    'FFNumFracAb90Grad': 'goldenrod',\n    'FFrecFrac': 'khaki',\n    'FFTotalFracAbSell': 'lightgoldenrodyellow',\n    'RqdRQD': 'darkorange'\n}\n\nLet’s enumerate the lithologies in order to assign colors:\n\n# Enumarate the lithologies\nunique_lithologies = lithology.unique()\n# Print the unique lithologies\nprint(\"Unique lithologies in the dataset:\")\nfor lithology in unique_lithologies:\n    print(lithology)\n\nNow we can assign a the colors to each lithologies:\n\n#Creation of the color map based on the different lithologies\ncmap_lith = {\n    'GRAV':'tan',\n    'AR':'darkgoldenrod',\n    'IND':'silver',\n    'SED':'gold',\n    'SBR':'chocolate',\n    'QFP1':'hotpink',\n    'COV':'cornsilk',\n    'QFP2':'coral',\n    'BRXH':'antiquewhite',\n    'FP':'mediumslateblue',\n    'ABX1':'mediumorchid',\n    'ABX2':'lightcoral',\n    'ABX3':'rosybrown',\n    'VOLC':'darkseagreen'\n}\n\nThen let’s enumerate the alteration:\n\n# Enumarate the alteration\nunique_alteration = alteration.unique()\n# Print the unique lithologies\nprint(\"Unique alteration in the dataset:\")\nfor alteration in unique_alteration:\n    print(alteration)\n\nAnd create the colors maps:\n\n#Creation of the color map based on the different alteration\ncmap_alt = {\n    'A': 'peru',       # Arbitrary color\n    'CL': 'yellowgreen',     # Arbitrary color\n    'QS': 'lightsalmon',       # Arbitrary color\n    'SA': 'orchid',    # Arbitrary color\n    'P': 'coral',     # Arbitrary color\n    'KB': 'gold',    # Arbitrary color\n    'KF': 'pink'       # Arbitrary color\n}\n\n\n4.2.4 Graphic representation\n\nLet’s assign the value for the hole ID, this is a parameter that can be changed as we go.\n\nholeid = 'SPD0412'  # Use the same hole ID for lithology, alteration and parameters\n\nThen we will filter the data from the dataset to the chosen HoleID\n\nfiltered_litho_alt=merged_data[merged_data['holeid']==holeid].copy()\nfiltered_parameters = merged_data[merged_data['holeid'] == holeid].copy()\n\nThe goal is to plot the parameters as a curves. These parameters have usually been measured from a sample taken between two depths. So, it makes sense to actually use the midpoint between these two depths to plot the parameter value.\n\nfiltered_parameters['MidDepth'] = (filtered_parameters['from'] + filtered_parameters['to']) / 2\n\nNow we can work on the graphic representation using the library matplolib. First let’s set up the figure, this the grid in which we will then plot the data.\n\n\n\n\n\n\n\nImportant\n\n\n\nAll the following code using plt need to be in the same cell. Here it will be separated for explanation.\n\n\n# Setup figure and axes using GridSpec\nfig = plt.figure(figsize=(16, 8))  # Adjust the size as needed\ngs = GridSpec(1, len(parameters) + 3, figure=fig)\n\nWe can set the background color to ‘none’ which means it will be transparent:\n\nfig.set(facecolor='none')\n\nThen the title:\n\n# General title for the figure\nfig.suptitle(f'Drillhole {holeid}', y= 0.9, fontsize=12, fontweight='bold', fontname='Calibri', ha='left', va='bottom')\n\nFirst plot will be to represent a log of the lithology:\n\n# Plot striplog Lithology\nax_lith = fig.add_subplot(gs[0, 0])\nax_lith.set(facecolor = \"white\")\nfor index, lith in filtered_litho_alt.iterrows():\n    color = cmap_lith.get(lith['Litologia'], 'white')\n    rect = patches.Rectangle((0, lith['from']), 1, lith['to'] - lith['from'], linewidth=1, edgecolor='None', facecolor=color)\n    ax_lith.add_patch(rect)\n    \nax_lith.set_ylim([max(filtered_litho_alt['to']), min(filtered_litho_alt['from'])])\nax_lith.set_xlim([0, 1])\nax_lith.set_xticks([])\nax_lith.set_ylabel('Depth (m)', fontsize=9, fontweight='bold', fontname='Calibri')\nax_lith.set_xlabel('Lithology', fontsize=9, fontweight='bold', fontname='Calibri', labelpad=17)\nax_lith.tick_params(axis='y', labelsize=7)  # Set tick label font size for y-axis\n\nSame for the alteration:\n\n# Plot striplog alteration\nax_alt = fig.add_subplot(gs[0,1])\nax_alt.set(facecolor=\"white\")\nfor id, alt in filtered_litho_alt.iterrows():\n    color = cmap_alt.get(alt['Alteracion'], 'white')\n    rect = patches.Rectangle((0, alt['from']), 1, alt['to'] - alt['from'], linewidth=1, edgecolor='None', facecolor=color)\n    ax_alt.add_patch(rect)\n\nax_alt.set_ylim([max(filtered_litho_alt['to']), min(filtered_litho_alt['from'])])\nax_alt.set_xlim([0, 1])\nax_alt.set_xticks([])\nax_alt.set_xlabel('Alteration', fontsize=9, fontweight='bold', fontname='Calibri', labelpad=17)\nax_alt.tick_params(axis='y', labelsize=7)  # Set tick label font size for y-axis\nThen plot all the chosen parameters, we need to create a loop in order to create several plot for each parameters.\n\nFirst let’s set the null value\n\n# Set null value\nnull_value='NaN'\n\nAnd then plot the logs\n\n# Plot parameters\nfor idx, element in enumerate(parameters, start=2):\n    ax = fig.add_subplot(gs[0, idx])\n    ax.set(facecolor = \"white\")\n    data_to_plot = filtered_parameters[element].replace(null_value, 0)\n    ax.plot(data_to_plot, filtered_parameters['MidDepth'], color=cmap_parameters[element], linewidth=2)\n    ax.set_xlabel(f\"{element} (%)\", fontsize=9, fontweight='bold', fontname='Calibri')\n    ax.set_ylim([max(filtered_litho_alt['to']), min(filtered_litho_alt['from'])])  # Reverse the y-axis\n    ax.tick_params(axis='both', labelsize=7)  # Set tick label font size for both axes\n    ax.grid(False)  # Turn off the grid\n    if idx > 1:\n        ax.set_yticklabels([])  # Hide y-axis labels for all but the first paramaters plot\n\n\n4.2.5 Add a legend\n\nTo add a legend\n\n# Collect unique lithology and alteration from the data\nunique_lithologies = filtered_litho_alt['Litologia'].unique()\nunique_alterations = filtered_litho_alt['Alteracion'].unique()  # Assuming 'Alteracion' column exists\n\n# Handles for the legend\nlegend_handles = []\n\n# Add Lithology entries to legend\nlegend_handles.append(patches.Patch(color='none', label='Lithology'))  # Subtitle for lithology\nfor label, color in cmap_lith.items():\n    if label in unique_lithologies:\n        legend_handles.append(patches.Patch(color=color, label=label))\nlegend_handles.append(patches.Patch(color='none', label=''))  # For separation\n\n# Add Alteration entries to legend\nlegend_handles.append(patches.Patch(color='none', label='Alteration'))  # Subtitle for alteration\nfor label, color in cmap_alt.items():\n    if label in unique_alterations:\n        legend_handles.append(patches.Patch(color=color, label=label))\nlegend_handles.append(patches.Patch(color='none', label=''))  # For separation\n    \n# Setting the legend outside the plot area on the right\nfig.legend(handles=legend_handles, loc='center left', bbox_to_anchor=(0.85, 0.5),\n           fontsize=9, edgecolor='black')\n\n\n4.2.6 Visualisation\n\nTo visualize and save the figure:\n\nplt.subplots_adjust(wspace=0.5)  # Adjust spacing between plots\n\n# Save the figure with the background of the figure transparent, not the plots\nplt.savefig('figure.png', dpi=300, bbox_inches='tight', pad_inches=0.1)\nplt.show()\n\nCTRL+ENTER. You should be able to visualise the result:\n\n\n\n\n4.2.7 Error handling\nJupyter is very practical to debug a code.\nTry to remove the line\n#Set null value\nnull_value='NaN'\nYou code will immediately underline the missing value:\n\nIf there is an error in your code, Jupyter Notebook has an integrated logging system that will help you define where the error is coming from."
  },
  {
    "objectID": "StartCodingToday_Eng.html#transform-jupyter-notebook-in-a-python-script",
    "href": "StartCodingToday_Eng.html#transform-jupyter-notebook-in-a-python-script",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "5.1 Transform Jupyter Notebook in a python script",
    "text": "5.1 Transform Jupyter Notebook in a python script\n\nIn the Explorer window, right click on the .ipynb file and select Import Notebook to Script. Another windows should be appearing Untitled-1\n\n\n\nFile>Save the file as Striplog.py. remember that the extension of the file is important.\n\n\n\nYou can run this script from your terminal. Make sure you are located within your Striplog folder. Enter the following line:\n\ncd Striplog\n\n\nThen run the code from the command terminal\n\npython Striplog.py"
  },
  {
    "objectID": "StartCodingToday_Eng.html#prepare-the-field-for-onecode",
    "href": "StartCodingToday_Eng.html#prepare-the-field-for-onecode",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "5.2 Prepare the field for Onecode",
    "text": "5.2 Prepare the field for Onecode\n\nIn your Terminal window, and install the library Onecode\n\npip install onecode[tech-expert]\nOneCode documentation can be found here: Deeplime Documentation\nFirst we need to install the OneCode skeleton to start from, this will automatically create folders and files to easily create a web app using streamlit.\n\nThen we will create the folder hierarchy for the onecode.\n\nonecode-create\n# then follow the prompts\n? Enter the path where to create OneCode project **C:\\Github\\Striplog**\n? Enter your OneCode project name: **Striplog_Onecode**\n? Pick a name for your main flow: **Striplog_Onecode**\n⠙ Creating new OneCode project\nInitialized empty Git repository in C:/Github/Striplog/Striplog_Onecode/.git/\n✅ Created Striplog OneCode project\nIt created the following:\n\n\n\n\n\n\n\nNote\n\n\n\nStreamlit is python library that allows to run data scripts into shareable web apps. Inconvenient is that the script needs to be shaped for streamlit app from the beginning, and visualisation setting can be tricky. Advantage of using Onecode is that the code directly translate a common python script in a usable streamlit app. And it is supposed to be comptabile and sharable work with any kind of setting, which is not the case with a stremalit code."
  },
  {
    "objectID": "StartCodingToday_Eng.html#add-code-to-your-onecode-project",
    "href": "StartCodingToday_Eng.html#add-code-to-your-onecode-project",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "5.3 Add code to your Onecode project",
    "text": "5.3 Add code to your Onecode project\nOpen to newly created striplog.py that have been created here C:\\Github\\Striplog\\flows\\striplog_onecode.py\nFirst, we will import the right tool from Onecode. Replace the first line in striplog.py by import onecode as follow.\nfrom onecode import (\n    Logger,\n    checkbox,\n    csv_reader,\n    dropdown,\n    file_output,\n    file_input,\n    image_output,\n    text_output,\n    csv_output,\n    slider\n)\nThen, we will copy the code we exported from Jupyter Notebook; We will import the libraries below the import Onecode line:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nfrom matplotlib.gridspec import GridSpec\nimport matplotlib.lines as mlines\nimport json\nimport os\nThen we will copy all code below the def run(). Then select all code and make sure the indent is correct as below:\n\n\n\n\n\n\n\nWarning\n\n\n\nRemove the onecode. before the Logger function."
  },
  {
    "objectID": "StartCodingToday_Eng.html#modify-the-code-to-put-inputs-outputs-buttons-etc.",
    "href": "StartCodingToday_Eng.html#modify-the-code-to-put-inputs-outputs-buttons-etc.",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "5.4 Modify the code to put inputs, outputs, buttons etc.",
    "text": "5.4 Modify the code to put inputs, outputs, buttons etc.\nMake sure you are working in the right folder, enter:\ncd Striplog_Onecode\nYou can also, copy the relative path directly in the Explorer, right click on the folder Striplog\n\n\n5.4.1 Add inputs files\nWe will modify the first entry lines and use the command csv_reader from Onecode.\nAnd we will replace:\ncollar_data = pd.read_csv('./data/collar.csv')\nby\ncollar_data = csv_reader('Collar', 'collar.csv')\nsame for the merged data file:\nmerged_data=pd.read_csv('./data/merged_data.csv')\nby\nmerged_data = csv_reader('Data', 'merged_data.csv')\n\n\n\n\n\n\nNote\n\n\n\nThe first arguments ‘Collar’ and ‘Data’ are called keys, it is the name with which the dataset will be recognized by Onecode. The second parameter indicates the type of file, in this case a csv.\n\n\nIn order to visualise the resultat, let’s go to the terminal and enter:\nonecode-start\nIt will open a window in your browser.\n\nBrowse for the files, navigate to C:/Github/Striplog/data, you will be able to visualise the datasets.\nTry to click on Run. There is no results because we have not marked the variables and output of the code.\n\n\n\n\n\n\nTip\n\n\n\nIn your terminal, you can see a local URL\n\nIf you need to modify your code, tap CTRL+C, it will stop the viewing.\n\n\n\n\n\n5.4.2 Input parameters\nRemember that in the code we chose the parameters that we wanted to plot. Here we will make it more interactive\nSearch for the line in you code (CTRL+F)\n#List the parameters to plot\nparameters=['FFEspaciamiento','RqdRQD','CUS','MO','CUFE']\nand replace by:\n#List the parameters to plot\nparameters = dropdown(\n 'Parameters',\n ['FFEspaciamiento', 'RqdRQD', 'CUS', 'MO', 'CUFE'],\n options='$data$.columns',\n multiple=True\n)\n\n\n\n\n\n\nNote\n\n\n\nThe first parameter of the dropdown function corresponds to the key. The second parameter are pre-selected parameters, you will be able to modify those in the webpage. The third parameter: {.python}options='$data$.columns' is in reference to the dataset imported and named data.\n\n\n\n\n5.4.3 Input holeID\nReplace:\nholeid = 'SPD0412'  # Use the same hole ID for both lithology and assays\nby\nholeid = dropdown('Selected holeid', 'SPD0412', options='$data$[\"holeid\"].unique()')\n\n\n5.4.4 Output image\nReplace\nplt.savefig('figure.png', dpi=300, bbox_inches='tight', pad_inches=0.1)\nby\nplt.savefig(image_output('figure','figure.png', dpi=300, bbox_inches='tight', pad_inches=0.1))"
  },
  {
    "objectID": "StartCodingToday_Eng.html#testing-on-the-web-app",
    "href": "StartCodingToday_Eng.html#testing-on-the-web-app",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "5.5 Testing on the Web App",
    "text": "5.5 Testing on the Web App\n\nLet’s run the code. In the terminal, enter:\n\nonecode-start\nYou can visualised the pre-selected data for both the parameters and the holeID.\n\n\nClick on Run In data you will be able to visualise your results."
  },
  {
    "objectID": "StartCodingToday_Eng.html#descripción-del-curso",
    "href": "StartCodingToday_Eng.html#descripción-del-curso",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "7.1 Descripción del Curso",
    "text": "7.1 Descripción del Curso\nA lo largo de este curso, tú:\n\nConfigurarás GitHub: Aprenderás a crear una cuenta de GitHub, instalar GitHub Desktop y configurar Git para el control de versiones.\nCrearás un Entorno de Python: Instalarás Python, configurarás Visual Studio Code (VS Code) y configurarás tu terminal y entorno de Python.\nCrearás un Script en Python: Escribirás y ejecutarás código Python usando Jupyter Notebook dentro de VS Code, y aprenderás prácticas esenciales de codificación.\nCrearás Aplicaciones Web con Onecode: Transformarás tu Jupyter Notebook en un script de Python, prepararás tu proyecto para Onecode y agregarás componentes necesarios como entradas, salidas y botones.\nDesplegarás una Aplicación Web usando Onecode: Desplegarás tu aplicación web y la harás accesible para los usuarios."
  },
  {
    "objectID": "StartCodingToday_Eng.html#sec-MaterialCurso",
    "href": "StartCodingToday_Eng.html#sec-MaterialCurso",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "7.2 Materiales del Curso",
    "text": "7.2 Materiales del Curso\nPara facilitar tu aprendizaje, hemos proporcionado varios archivos que utilizarás a lo largo del curso. Estos archivos están disponibles a continuación:\n\n\n\n\n\n\n\n\nPaso\nNombre del Archivo\nFunción\n\n\n\n\nPaso 1\nGitHub Desktop\nArchivo ejecutable independiente de GitHub\n\n\n\nGit\nArchivo ejecutable independiente de Git\n\n\nPaso 2\nPython 3.10\nArchivo ejecutable de Python 3.10\n\n\n\nVSCode\nArchivo ejecutable independiente de Visual Code Basic\n\n\nPaso 3\ncollar.csv\nConjunto de datos para pruebas\n\n\n\nmerged_data.csv\n\n\n\n\nStriplog.ipynb\nArchivo de Jupyter Notebook creado durante el Paso 2\n\n\n\nStriplog.py\nArchivo de Python creado a partir del Jupyter Notebook\n\n\nPaso 4\nStriplog_OneCode.zip\nEstructura de carpetas de OneCode\n\n\n\nAl final de este curso, tendrás una base sólida en programación y desarrollo de aplicaciones web, equipado con las habilidades para crear y desplegar tus propias aplicaciones. ¡Vamos a empezar!"
  },
  {
    "objectID": "StartCodingToday_Eng.html#configuración-de-una-cuenta",
    "href": "StartCodingToday_Eng.html#configuración-de-una-cuenta",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "8.1 Configuración de una cuenta",
    "text": "8.1 Configuración de una cuenta\nPara comenzar con GitHub, sigue estos pasos:\n\nVe a pythonGitHub y Regístrate.\n\n\n\nIngresa tu dirección de correo electrónico (ya sea profesional o personal).\nCrea una contraseña.\nElige un nombre de usuario."
  },
  {
    "objectID": "StartCodingToday_Eng.html#instalar-github-desktop",
    "href": "StartCodingToday_Eng.html#instalar-github-desktop",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "8.2 Instalar GitHub Desktop",
    "text": "8.2 Instalar GitHub Desktop\nA continuación, necesitas instalar GitHub Desktop:\n\nDescarga GitHub Desktop (ver Section 7.2).\nEn la raíz de tu unidad C:/, crea una carpeta llamada pythonGitHub. Esta carpeta contendrá todos tus repositorios correspondientes a tus códigos.\nAbre GitHub Desktop y haz clic en Create a New Repository on your local drive….\n\n\n\nCompleta el formulario de la siguiente manera y haz clic en Create Repository.\n\n\nEsto creará una carpeta llamada “Striplog” en la carpeta “pythonGitHub” y generará dos archivos: - .gitattributes que inicializa GitHub. - README.md que contiene la descripción de tu repositorio.\nEsta configuración nos permitirá interactuar con tu cuenta de GitHub.\n\n\nPara publicar la carpeta en GitHub, haz clic en Publish repository. Inicia sesión en tu cuenta de GitHub y sigue los pasos.\n\n\n\nAhora, conéctate en línea a tu cuenta de GitHub, haz clic en tu imagen de perfil y selecciona Your repositories. Deberías ver tu repositorio Striplog."
  },
  {
    "objectID": "StartCodingToday_Eng.html#instalar-git",
    "href": "StartCodingToday_Eng.html#instalar-git",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "8.3 Instalar Git",
    "text": "8.3 Instalar Git\nPara instalar Git, sigue estos pasos:\n\nDescarga Git (ver Section 7.2).\nDurante la configuración, asegúrate de seleccionar la opción Unix tools from the Command Prompt."
  },
  {
    "objectID": "StartCodingToday_Eng.html#instalación-de-python",
    "href": "StartCodingToday_Eng.html#instalación-de-python",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "9.1 Instalación de Python",
    "text": "9.1 Instalación de Python\nPython es comúnmente utilizado por geólogos debido a las numerosas bibliotecas disponibles para tareas relacionadas con la geología, muchas de las cuales son de código abierto. Sin embargo, el uso extensivo de bibliotecas significa que el código a menudo necesita ser actualizado a medida que las bibliotecas se actualizan.\nPara este curso, instalaremos Python 3.10 porque algunas de las bibliotecas que utilizaremos (ver 3.4.2 Instalación de Bibliotecas) requieren Python 3.10. Ten en cuenta que hay versiones más nuevas de Python disponibles.\n\nDescarga Python 3.10 (ver Section 7.2).\nEjecuta el instalador .exe.\nAsegúrate de marcar la casilla Add Python 3.10 to PATH antes de hacer clic en Customize Installation. Este paso es crucial ya que hace que Python sea accesible desde la línea de comandos.\nPersonaliza la ubicación de la instalación creando una nueva carpeta en la raíz de tu unidad C:/ llamada “Python310”. Cuanto más cerca de la raíz, más fácil será encontrarla.\nHaz clic en Disable path length limit y luego en Close.\n\n\n\n\n\n\n\n\nNote\n\n\n\nNuevas versiones de Python están disponibles cada año. Eventualmente necesitarás actualizar tu Python a medida que las bibliotecas se actualizan. Sin embargo, ten cuidado con las actualizaciones, ya que pueden tomar tiempo dependiendo de la biblioteca. Actualizar Python demasiado pronto puede hacer que tus scripts queden obsoletos, requiriendo tiempo para actualizar tus scripts para que funcionen correctamente nuevamente. Es por eso que algunos codificadores expertos prefieren usar un lenguaje más básico como “R”."
  },
  {
    "objectID": "StartCodingToday_Eng.html#configuración-de-visual-studio-code",
    "href": "StartCodingToday_Eng.html#configuración-de-visual-studio-code",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "9.2 Configuración de Visual Studio Code",
    "text": "9.2 Configuración de Visual Studio Code\n\n9.2.1 Instalación de Visual Studio Code\nInstalaremos Visual Studio Code (VS Code), un editor de código gratuito, de código abierto y potente que se ejecuta en tu escritorio y está disponible para Windows, macOS y Linux. Viene con soporte integrado para varios lenguajes, incluido Python.\n\nDescarga Visual Studio Code (ver Section 7.2).\n\n\n\n\n\n\n\n\nNote\n\n\n\nEs posible que escuches sobre Anaconda, que es una distribución de los lenguajes de programación Python y R diseñada para la computación científica y la ciencia de datos. Simplifica la gestión de paquetes y el despliegue. Es gratuito y fue ampliamente utilizado en SRK, pero a partir de octubre de 2020, los términos de licencia de Anaconda han cambiado, restringiendo el uso de la Edición Individual de Anaconda para empresas con más de 200 empleados.\n\n\n\n\n9.2.2 Descripción General de la Interfaz de Visual Studio Code\nVisual Studio Code ofrece una interfaz fácil de usar con varias funcionalidades accesibles desde el lado izquierdo de la ventana:\n\n\nExplorer: Accede a tus repositorios y archivos.\nSearch: Busca palabras clave y ocurrencias dentro de tus repositorios.\nSource Control: Sincroniza tu repositorio con GitHub.\nRun and Debug: Ejecuta y depura tu código.\nExtensions: Instala varias extensiones para personalizar tu experiencia en VS Code.\n\nTambién puedes cambiar el esquema de colores de tu interfaz para adaptarlo a tus preferencias.\n\nEn VS Code, ve a File > Preferences > Color Theme.\nSelecciona un tema en la ventana que se abre.\n\n\n\n\n9.2.3 Instalación de Extensiones\nMuchas extensiones están disponibles para VS Code. Haz clic en el ícono en el lado izquierdo de la pantalla y en la barra de búsqueda ingresa:\n\nPython y Python Extension Pack para que VS Code pueda leer Python.\n\n\n\nJupyter: Haz clic en la primera opción y luego en Install. Esto instalará automáticamente cuatro extensiones adicionales como un paquete. Esta extensión nos permitirá usar Jupyter Notebook dentro del entorno de VS Code.\n\n\n\nVscode-icons: Esta extensión te permite ver íconos familiares para CSV, texto, Jupyter Notebook, etc., en la ventana del explorador, proporcionando una mejor vista inicial en lugar de depender solo de las extensiones de archivo.\n\n\n\nGitHub repositories: Esta extensión te permite navegar, buscar, editar y hacer commits en GitHub directamente desde Visual Studio Code."
  },
  {
    "objectID": "StartCodingToday_Eng.html#configurar-el-terminal",
    "href": "StartCodingToday_Eng.html#configurar-el-terminal",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "9.3 Configurar el Terminal",
    "text": "9.3 Configurar el Terminal\nPuedes acceder al terminal en la parte superior de la ventana y seleccionar New terminal, que se abrirá en la parte inferior. Alternativamente, usa el atajo CTRL+.\n\nAsegúrate de seleccionar Command Prompt y configurarlo como predeterminado porque si cierras la ventana del terminal, volverás a Powershell y el entorno no se activará. Para ahorrar tiempo, sigue este consejo:\n\nEn la ventana del terminal que se abrió en la parte inferior de la pantalla, haz clic en la flecha a la derecha del signo más y selecciona Select Default Profile.\nEn la parte superior de la pantalla, ingresa command y selecciona Command Prompt."
  },
  {
    "objectID": "StartCodingToday_Eng.html#configuración-de-un-entorno",
    "href": "StartCodingToday_Eng.html#configuración-de-un-entorno",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "9.4 Configuración de un Entorno",
    "text": "9.4 Configuración de un Entorno\n\n9.4.1 Creación de un Entorno de Python\nCada vez que quieras ejecutar un script de Python, Visual Studio te pedirá que especifiques el entorno. El entorno incluirá todas las bibliotecas necesarias para ejecutar el script. Puedes actualizarlo a través del terminal en cualquier momento que lo necesites, y lo haremos a lo largo de este curso.\n\nEn el terminal, navega a tu directorio de proyecto usando el comando cd.\n\ncd C:/Github\n\nPara crear el entorno virtual, ingresa la siguiente línea:\n\npython -m venv .base\no si ya tienes otras versiones de Python instaladas en tu computadora, deberías usar lo siguiente:\npy – 3.10 -m venv .base\n.base es el nombre del nuevo entorno. Si necesitas crear otro en el futuro, usa la misma metodología con un nombre diferente.\n\nPara activar el entorno, ingresa:\n\n.\\.base\\Scripts\\activate\nVerás que el entorno está activado cuando veas antes de tu línea de código (.base)\n\n\n\n\n\n\n\nNote\n\n\n\nSi encuentras un error ‘Python cannot be found’, es posible que necesites agregar Python al PATH de tu sistema manualmente. Abre el menú de Inicio y busca ‘Environment Variables’. Selecciona ‘Edit the system environment Variables’. En la ventana de Propiedades del Sistema, haz clic en el botón “Environment Variables…”.\n\n\nHaz clic en “New” y agrega la ruta a tu directorio de instalación de Python C:\\Python310.\n\n\n9.4.2 Instalación de bibliotecas\nEn tu entorno, instalaremos todas las bibliotecas necesarias para el código. Las más comunes se describen a continuación.\n\nJupyter: Parte del Proyecto Jupyter, una iniciativa de código abierto centrada en la computación interactiva. Proporciona herramientas para crear y compartir documentos que contienen código en vivo, ecuaciones, visualizaciones y texto narrativo. Soporta varios lenguajes de programación, incluidos Python, R y Julia, a través de diferentes kernels.\nIPython Kernel: Un kernel de Jupyter para Python, que permite que los cuadernos de Jupyter ejecuten código Python. Proporciona la interfaz entre los frontends de Jupyter (como Jupyter Notebook, JupyterLab y otras herramientas de computación interactiva) y el entorno de ejecución de Python.\nPandas: Una biblioteca utilizada principalmente para la manipulación y el análisis de datos. Proporciona estructuras de datos y funciones que facilitan la manipulación de conjuntos de datos grandes o complejos, particularmente con sus poderosos objetos DataFrame y Series. Es ampliamente utilizada en ciencia de datos, finanzas y muchas formas de análisis donde la limpieza y preparación de datos son críticas.\nNumpy: Fundamental para la computación científica con Python. Proporciona soporte para arreglos y matrices grandes y multidimensionales, junto con una gran colección de funciones matemáticas de alto nivel para operar en estos arreglos. Esta biblioteca se utiliza ampliamente en áreas que requieren cálculos numéricos, como simulaciones, análisis estadístico y aprendizaje automático.\nMatplotlib: Una biblioteca de gráficos para el lenguaje de programación Python y su extensión de matemáticas numéricas NumPy. Proporciona una API orientada a objetos para incrustar gráficos en aplicaciones utilizando kits de herramientas GUI de propósito general como Tkinter, wxPython, Qt o GTK. Algunos módulos específicos dentro de Matplotlib incluyen:\n\n.pyplot: Un módulo en Matplotlib que proporciona una interfaz similar a MATLAB. Es con estado, lo que significa que mantiene un seguimiento de la figura actual y el área de gráficos, y las funciones de gráficos se dirigen a los ejes actuales.\n.patches: Este módulo permite un control más detallado sobre las formas que se pueden dibujar, con clases como Rectangle y Circle que se pueden agregar a los gráficos para representar datos gráficamente, a menudo utilizados para anotaciones o resaltar datos específicos.\n.gridspec: Se utiliza para especificar la geometría de la cuadrícula en la que se colocará un subgráfico. Esto se puede usar para crear diseños donde los subgráficos tienen tamaños variables.\n.lines: Este módulo te permite personalizar las propiedades de las líneas en un gráfico, como el estilo de la línea, el ancho y el color. Es útil para mejorar las distinciones visuales entre múltiples conjuntos de datos en el mismo gráfico.\n\n\nPara instalar estas bibliotecas, ingresa los siguientes comandos en el terminal:\n\nInstalar Pandas:\n\npip install pandas\n\n\nInstalar la biblioteca Jupyter:\n\npip install jupyter\n\nInstalar la biblioteca Ipython Kernel:\n\npip install ipykernel\n\nInstalar la biblioteca Matplotlib:\n\npip install matplotlib\nTu entorno ya está configurado, puedes instalar nuevas bibliotecas en cualquier momento usando el comando pip install.\n\nReinicia VS Code."
  },
  {
    "objectID": "StartCodingToday_Eng.html#explorador",
    "href": "StartCodingToday_Eng.html#explorador",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "9.5 Explorador",
    "text": "9.5 Explorador\nNecesitarás acceder a tu carpeta de GitHub desde VS Code. Ve a la pestaña Explorer y selecciona Open Folder, navega a tu carpeta local de GitHub. Ahora verás tu carpeta Striplog y el .base que corresponde al entorno."
  },
  {
    "objectID": "StartCodingToday_Eng.html#introducción-a-jupyter-notebook",
    "href": "StartCodingToday_Eng.html#introducción-a-jupyter-notebook",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "10.1 Introducción a Jupyter Notebook",
    "text": "10.1 Introducción a Jupyter Notebook\nJupyter Notebook es una herramienta útil para probar y visualizar cada parte de tu código. Te permite hacer que tu código sea comprensible rápidamente, lo cual es útil si necesitas compartir el código o si pasará tiempo antes de que lo uses nuevamente. Para esta parte, utilizaremos Jupyter Notebook.\n\n10.1.1 Creación de un Jupyter Notebook en VS Code\n\nHaz clic derecho en la carpeta Striplog en la ventana del Explorador y selecciona New File.\n\n\n\nRenombra el archivo a Striplog.ipynb. La extensión es importante ya que definirá automáticamente el tipo de archivo.\nHaz clic en tu nuevo archivo.\n\n\n\n\n10.1.2 Seleccionar un Kernel\n\nEn la parte superior derecha de la ventana de VS Code, haz clic en Python 3.10.11.\n\n\n\nHaz clic en Select Another Kernel.\n\n\n\nHaz clic en Python Environments.\n\n\n\nSelecciona .base. Ahora deberías ver el Kernel utilizado:\n\n\n\n10.1.3 Atajos de teclado en Jupyter Notebook\n\n\n\n\n\n\n\nAtajo de teclado\nAcción\n\n\n\n\nCTRL+ENTER\nEjecutar la celda\n\n\nESC + dd\nEliminar la celda\n\n\nESC+A\nAgregar una celda arriba\n\n\nESC+B\nAgregar una celda abajo\n\n\n\n\n\n10.1.4 Markdown vs. Código\nMarkdown nos permite crear un código similar a un informe que facilitará el proceso de compartir. Algunas cosas a recordar para el formato en Jupyter Notebook:\n# Heading Level 1\n## Heading Level 2\n### Heading Level 3\n#### Heading Level 4\n\n**Bold text**\n\n*Italic text*\n\n- Bulleted item\n- Bulleted item\n\n1. Numbered item\n2. Numbered item\n\n***\n\n\nPrimero, asegúrate de que tu celda esté en modo Markdown. Deberías verlo en la esquina inferior derecha de la celda:\nIngresa tu título y una breve descripción del proyecto. Por ejemplo:\n\n## Striplog app\n\nThis app aims to facilitate quick visualization of drillhole data\n\n\nSelecciona Run all o CTRL+ENTER.\n\n\nEsto facilita la explicación dentro del código.\n\nAhora ingresemos una línea de código: pasa el cursor sobre la primera celda y haz clic en +code o usa el atajo de teclado b (asegúrate de no estar editando la celda, usa la tecla Esc).\n\n\n\n\n10.1.5 Importar Bibliotecas\nEn cualquier código de Python, necesitarás importar las bibliotecas en tu código incluso si ya las instalaste en tu entorno.\n#Import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nfrom matplotlib.gridspec import GridSpec\nimport matplotlib.lines as mlines\n\nHaz clic en la celda y presiona CTRL+ENTER o haz clic en la parte superior en Run all. Si todas las bibliotecas se han importado correctamente, deberías ver un signo de verificación verde:"
  },
  {
    "objectID": "StartCodingToday_Eng.html#escribir-el-código",
    "href": "StartCodingToday_Eng.html#escribir-el-código",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "10.2 Escribir el código",
    "text": "10.2 Escribir el código\nComencemos con el código, puedes usar tantas celdas como necesites y ejecutarlas por separado para verificar errores.\n\n10.2.1 Archivos de entrada\nPrimero, importaremos los archivos necesarios, necesitamos el collar para el HoleID vinculado a depth_max. Para este ejercicio, será más fácil copiar los archivos de datos en la carpeta Striplog. Navega a C:/Github/Striplog y copia la carpeta de datos proporcionada con este curso StartCodingToday/Step3/data. Esta carpeta contiene dos archivos CSV:\n\ncollar.csv\nmerge_data.csv\n\n\n\nCrea una nueva celda en tu Jupyter Notebook.\n\n# Load collar data to get max depths for each hole\ncollar_data = pd.read_csv('./data/collar.csv')\n\n\n\n\n\n\nNote\n\n\n\n./ indica una ruta relativa a la ubicación del archivo Striplog.ipynb. ./data significa que localizará el archivo collar.csv en la ruta C:/Github/Striplog/data.\n\n\n\n\n\n\n\n\nNote\n\n\n\nEn celdas que son código y no markdown, puedes agregar fácilmente explicaciones usando #.\n\n\n\nLuego importaremos los datos de intervalo:\n\n# Print the headers of the merged table\nmerged_data=pd.read_csv('./data/merged_data.csv')\n\nSi quieres ver los nombres de las columnas de la tabla, ingresa:\n\nprint(merged_data.columns.tolist())\n\n\nSi quieres ver las primeras filas:\n\nprint(merged_data.head())\n\n\nEn el conjunto de datos, los valores faltantes están marcados por ‘-99’. Para este script, queremos limpiar los datos y reemplazar -99 por NaN.\n\nmerged_data = merged_data.replace(-99, np.NaN)\nmerged_data = merged_data.replace('-99', np.NaN)\n\nCTRL+ENTER\n\n\n\n\n10.2.2 Asignar Valores\nEs muy importante nombrar cada valor para poder llamarlos correctamente después. merged_data se refiere a la tabla que importamos anteriormente.\n#Assign values\nlithology=merged_data['Litologia']\nalteration=merged_data['Alteracion']\n\n#List the parameters to plot\nparameters=['FFEspaciamiento','RqdRQD','CUS','MO','CUFE']\n\n\n10.2.3 Creación de un Mapa de Colores\nTen en cuenta que, como estamos usando la biblioteca matplotlib, hay colores CSS asociados con esta biblioteca. Así que puedes usarlos.\n\n\nImprimamos los encabezados de las tablas CSV para visualizar los parámetros que queremos visualizar.\n\n#Create a color map for the parameters\n\ncmap_parameters = {\n    'PP_MINTYPE_calculadoPtXt': 'deepskyblue',\n    'AG': 'dodgerblue',\n    'AS': 'gold',\n    'Au_ppb_BEST': 'yellowgreen',\n    'ClT_kgt_BEST': 'lightcoral',\n    'CO3_pct_BEST': 'mediumseagreen',\n    'CUCN': 'darkcyan',\n    'CUFE': 'firebrick',\n    'CUS': 'indianred',\n    'CUT': 'chocolate',\n    'FE': 'saddlebrown',\n    'FET': 'peru',\n    'MO': 'mediumpurple',\n    'PP_AS_PP': 'orchid',\n    'PP_CC_2CSR': 'plum',\n    'PP_CC_PP': 'violet',\n    'PP_COV_2CSR': 'thistle',\n    'PP_COV_PP': 'lavender',\n    'PP_CPY_2CSR': 'slateblue',\n    'PP_CPY_PP': 'mediumslateblue',\n    'PY_BEST': 'royalblue',\n    'S': 'steelblue',\n    'S2': 'skyblue',\n    'FFEspaciamiento': 'deepskyblue',\n    'FFNumFracAb30Grad': 'darkorange',\n    'FFNumFracAb60Grad': 'orange',\n    'FFNumFracAb90Grad': 'goldenrod',\n    'FFrecFrac': 'khaki',\n    'FFTotalFracAbSell': 'lightgoldenrodyellow',\n    'RqdRQD': 'darkorange'\n}\n\nEnumeremos las litologías para asignar colores:\n\n# Enumarate the lithologies\nunique_lithologies = lithology.unique()\n# Print the unique lithologies\nprint(\"Unique lithologies in the dataset:\")\nfor lithology in unique_lithologies:\n    print(lithology)\n\nAhora podemos asignar los colores a cada litología:\n\n#Creation of the color map based on the different lithologies\ncmap_lith = {\n    'GRAV':'tan',\n    'AR':'darkgoldenrod',\n    'IND':'silver',\n    'SED':'gold',\n    'SBR':'chocolate',\n    'QFP1':'hotpink',\n    'COV':'cornsilk',\n    'QFP2':'coral',\n    'BRXH':'antiquewhite',\n    'FP':'mediumslateblue',\n    'ABX1':'mediumorchid',\n    'ABX2':'lightcoral',\n    'ABX3':'rosybrown',\n    'VOLC':'darkseagreen'\n}\n\nLuego enumeremos la alteración:\n\n# Enumarate the alteration\nunique_alteration = alteration.unique()\n# Print the unique lithologies\nprint(\"Unique alteration in the dataset:\")\nfor alteration in unique_alteration:\n    print(alteration)\n\nY creemos los mapas de colores:\n\n#Creation of the color map based on the different alteration\ncmap_alt = {\n    'A': 'peru',       # Arbitrary color\n    'CL': 'yellowgreen',     # Arbitrary color\n    'QS': 'lightsalmon',       # Arbitrary color\n    'SA': 'orchid',    # Arbitrary color\n    'P': 'coral',     # Arbitrary color\n    'KB': 'gold',    # Arbitrary color\n    'KF': 'pink'       # Arbitrary color\n}\n\n\n10.2.4 Representación Gráfica\n\nAsignemos el valor para el ID del agujero, este es un parámetro que se puede cambiar a medida que avanzamos.\n\nholeid = 'SPD0412'  # Use the same hole ID for lithology, alteration and parameters\n\nLuego filtraremos los datos del conjunto de datos al HoleID elegido.\n\nfiltered_litho_alt=merged_data[merged_data['holeid']==holeid].copy()\nfiltered_parameters = merged_data[merged_data['holeid'] == holeid].copy()\n\nEl objetivo es graficar los parámetros como curvas. Estos parámetros generalmente se han medido a partir de una muestra tomada entre dos profundidades. Por lo tanto, tiene sentido usar el punto medio entre estas dos profundidades para graficar el valor del parámetro.\n\nfiltered_parameters['MidDepth'] = (filtered_parameters['from'] + filtered_parameters['to']) / 2\n\nAhora podemos trabajar en la representación gráfica usando la biblioteca matplotlib. Primero, configuremos la figura, esta es la cuadrícula en la que luego graficaremos los datos.\n\n\n\n\n\n\n\nImportant\n\n\n\nAll the following code using plt need to be in the same cell. Here it will be separated for explanation.\n\n\n# Setup figure and axes using GridSpec\nfig = plt.figure(figsize=(16, 8))  # Adjust the size as needed\ngs = GridSpec(1, len(parameters) + 3, figure=fig)\n\nPodemos establecer el color de fondo en ‘none’, lo que significa que será transparente:\n\nfig.set(facecolor='none')\n\nLuego el título:\n\n# General title for the figure\nfig.suptitle(f'Drillhole {holeid}', y= 0.9, fontsize=12, fontweight='bold', fontname='Calibri', ha='left', va='bottom')\n\nEl primer gráfico será para representar un registro de la litología:\n\n# Plot striplog Lithology\nax_lith = fig.add_subplot(gs[0, 0])\nax_lith.set(facecolor = \"white\")\nfor index, lith in filtered_litho_alt.iterrows():\n    color = cmap_lith.get(lith['Litologia'], 'white')\n    rect = patches.Rectangle((0, lith['from']), 1, lith['to'] - lith['from'], linewidth=1, edgecolor='None', facecolor=color)\n    ax_lith.add_patch(rect)\n    \nax_lith.set_ylim([max(filtered_litho_alt['to']), min(filtered_litho_alt['from'])])\nax_lith.set_xlim([0, 1])\nax_lith.set_xticks([])\nax_lith.set_ylabel('Depth (m)', fontsize=9, fontweight='bold', fontname='Calibri')\nax_lith.set_xlabel('Lithology', fontsize=9, fontweight='bold', fontname='Calibri', labelpad=17)\nax_lith.tick_params(axis='y', labelsize=7)  # Set tick label font size for y-axis\n\nLo mismo para la alteración:\n\n# Plot striplog alteration\nax_alt = fig.add_subplot(gs[0,1])\nax_alt.set(facecolor=\"white\")\nfor id, alt in filtered_litho_alt.iterrows():\n    color = cmap_alt.get(alt['Alteracion'], 'white')\n    rect = patches.Rectangle((0, alt['from']), 1, alt['to'] - alt['from'], linewidth=1, edgecolor='None', facecolor=color)\n    ax_alt.add_patch(rect)\n\nax_alt.set_ylim([max(filtered_litho_alt['to']), min(filtered_litho_alt['from'])])\nax_alt.set_xlim([0, 1])\nax_alt.set_xticks([])\nax_alt.set_xlabel('Alteration', fontsize=9, fontweight='bold', fontname='Calibri', labelpad=17)\nax_alt.tick_params(axis='y', labelsize=7)  # Set tick label font size for y-axis\nThen plot all the chosen parameters, we need to create a loop in order to create several plot for each parameters.\n\nPrimero establezcamos el valor nulo\n\n# Set null value\nnull_value='NaN'\n\nY luego grafiquemos los registros\n\n# Plot parameters\nfor idx, element in enumerate(parameters, start=2):\n    ax = fig.add_subplot(gs[0, idx])\n    ax.set(facecolor = \"white\")\n    data_to_plot = filtered_parameters[element].replace(null_value, 0)\n    ax.plot(data_to_plot, filtered_parameters['MidDepth'], color=cmap_parameters[element], linewidth=2)\n    ax.set_xlabel(f\"{element} (%)\", fontsize=9, fontweight='bold', fontname='Calibri')\n    ax.set_ylim([max(filtered_litho_alt['to']), min(filtered_litho_alt['from'])])  # Reverse the y-axis\n    ax.tick_params(axis='both', labelsize=7)  # Set tick label font size for both axes\n    ax.grid(False)  # Turn off the grid\n    if idx > 1:\n        ax.set_yticklabels([])  # Hide y-axis labels for all but the first paramaters plot\n\n\n10.2.5 Agregar una leyenda\n\nPara agregar una leyenda\n\n# Collect unique lithology and alteration from the data\nunique_lithologies = filtered_litho_alt['Litologia'].unique()\nunique_alterations = filtered_litho_alt['Alteracion'].unique()  # Assuming 'Alteracion' column exists\n\n# Handles for the legend\nlegend_handles = []\n\n# Add Lithology entries to legend\nlegend_handles.append(patches.Patch(color='none', label='Lithology'))  # Subtitle for lithology\nfor label, color in cmap_lith.items():\n    if label in unique_lithologies:\n        legend_handles.append(patches.Patch(color=color, label=label))\nlegend_handles.append(patches.Patch(color='none', label=''))  # For separation\n\n# Add Alteration entries to legend\nlegend_handles.append(patches.Patch(color='none', label='Alteration'))  # Subtitle for alteration\nfor label, color in cmap_alt.items():\n    if label in unique_alterations:\n        legend_handles.append(patches.Patch(color=color, label=label))\nlegend_handles.append(patches.Patch(color='none', label=''))  # For separation\n    \n# Setting the legend outside the plot area on the right\nfig.legend(handles=legend_handles, loc='center left', bbox_to_anchor=(0.85, 0.5),\n           fontsize=9, edgecolor='black')\n\n\n10.2.6 Visualización\n\nPara visualizar y guardar la figura:\n\nplt.subplots_adjust(wspace=0.5)  # Adjust spacing between plots\n\n# Save the figure with the background of the figure transparent, not the plots\nplt.savefig('figure.png', dpi=300, bbox_inches='tight', pad_inches=0.1)\nplt.show()\n\nCTRL+ENTER. Deberías poder visualizar el resultado:\n\n\n\n\n10.2.7 Manejo de Errores\nJupyter es muy práctico para depurar un código.\nIntenta eliminar la línea:\n#Set null value\nnull_value='NaN'\nTu código subrayará inmediatamente el valor faltante:\n\nSi hay un error en tu código, Jupyter Notebook tiene un sistema de registro integrado que te ayudará a definir de dónde proviene el error."
  },
  {
    "objectID": "StartCodingToday_Eng.html#transformar-jupyter-notebook-en-un-script-de-python",
    "href": "StartCodingToday_Eng.html#transformar-jupyter-notebook-en-un-script-de-python",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "11.1 Transformar Jupyter Notebook en un script de Python",
    "text": "11.1 Transformar Jupyter Notebook en un script de Python\n\nEn la ventana del Explorador, haz clic derecho en el archivo .ipynb y selecciona Import Notebook to Script. Debería aparecer otra ventana Untitled-1.\n\n\n\nFile>Save the file as Striplog.py. recuerda que la extensión del archivo es importante.\n\n\n\nPuedes ejecutar este script desde tu terminal. Asegúrate de estar ubicado dentro de tu carpeta Striplog. Ingresa la siguiente línea:\n\ncd Striplog\n\n\nLuego ejecuta el código desde el terminal de comandos.\n\npython Striplog.py"
  },
  {
    "objectID": "StartCodingToday_Eng.html#preparar-el-campo-para-onecode",
    "href": "StartCodingToday_Eng.html#preparar-el-campo-para-onecode",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "11.2 Preparar el campo para Onecode",
    "text": "11.2 Preparar el campo para Onecode\n\nEn tu ventana de Terminal, instala la biblioteca Onecode.\n\npip install onecode[tech-expert]\nLa documentación de OneCode se puede encontrar aquí: Deeplime Documentation\nPrimero necesitamos instalar el esqueleto de OneCode para comenzar, esto creará automáticamente carpetas y archivos para crear fácilmente una aplicación web usando streamlit.\n\nLuego crearemos la jerarquía de carpetas para onecode.\n\nonecode-create\n# then follow the prompts\n? Enter the path where to create OneCode project **C:\\Github\\Striplog**\n? Enter your OneCode project name: **Striplog_Onecode**\n? Pick a name for your main flow: **Striplog_Onecode**\n⠙ Creating new OneCode project\nInitialized empty Git repository in C:/Github/Striplog/Striplog_Onecode/.git/\n✅ Created Striplog OneCode project\nSe creó lo siguiente:\n\n\n\n\n\n\n\nNote\n\n\n\nStreamlit es una biblioteca de Python que permite convertir scripts de datos en aplicaciones web compartibles. El inconveniente es que el script necesita estar diseñado para la aplicación de streamlit desde el principio, y la configuración de visualización puede ser complicada. La ventaja de usar Onecode es que el código traduce directamente un script común de Python en una aplicación de streamlit utilizable. Y se supone que es compatible y compartible con cualquier tipo de configuración, lo cual no es el caso con un código de streamlit."
  },
  {
    "objectID": "StartCodingToday_Eng.html#agregar-código-a-tu-proyecto-onecode",
    "href": "StartCodingToday_Eng.html#agregar-código-a-tu-proyecto-onecode",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "11.3 Agregar código a tu proyecto Onecode",
    "text": "11.3 Agregar código a tu proyecto Onecode\nAbre el archivo striplog.py recién creado que se encuentra aquí C:\\Github\\Striplog\\flows\\striplog_onecode.py.\nPrimero, importaremos la herramienta correcta de Onecode. Reemplaza la primera línea en striplog.py por import onecode de la siguiente manera.\nfrom onecode import (\n    Logger,\n    checkbox,\n    csv_reader,\n    dropdown,\n    file_output,\n    file_input,\n    image_output,\n    text_output,\n    csv_output,\n    slider\n)\nLuego, copiaremos el código que exportamos de Jupyter Notebook; Importaremos las bibliotecas debajo de la línea import Onecode:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nfrom matplotlib.gridspec import GridSpec\nimport matplotlib.lines as mlines\nimport json\nimport os\nLuego copiaremos todo el código debajo de def run(). Luego selecciona todo el código y asegúrate de que la indentación sea correcta como se muestra a continuación:\n\n\n\n\n\n\n\nWarning\n\n\n\nElimina el onecode. antes de la función Logger."
  },
  {
    "objectID": "StartCodingToday_Eng.html#modificar-el-código-para-agregar-entradas-salidas-botones-etc.",
    "href": "StartCodingToday_Eng.html#modificar-el-código-para-agregar-entradas-salidas-botones-etc.",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "11.4 Modificar el código para agregar entradas, salidas, botones, etc.",
    "text": "11.4 Modificar el código para agregar entradas, salidas, botones, etc.\nAsegúrate de estar trabajando en la carpeta correcta, ingresa:\ncd Striplog_Onecode\nTambién puedes copiar la ruta relativa directamente en el Explorador, haz clic derecho en la carpeta Striplog.\n\n\n11.4.1 Agregar archivos de entrada\nModificaremos las primeras líneas de entrada y usaremos el comando csv_reader de Onecode.\nY reemplazaremos:\ncollar_data = pd.read_csv('./data/collar.csv')\npor\ncollar_data = csv_reader('Collar', 'collar.csv')\nlo mismo para el archivo de datos combinados:\nmerged_data=pd.read_csv('./data/merged_data.csv')\npor\nmerged_data = csv_reader('Data', 'merged_data.csv')\n\n\n\n\n\n\nNote\n\n\n\nLos primeros argumentos ‘Collar’ y ‘Data’ se llaman claves, es el nombre con el que el conjunto de datos será reconocido por Onecode. El segundo parámetro indica el tipo de archivo, en este caso un csv.\n\n\nPara visualizar el resultado, vamos al terminal e ingresemos:\nonecode-start\nSe abrirá una ventana en tu navegador.\n\nBusca los archivos, navega a C:/Github/Striplog/data, podrás visualizar los conjuntos de datos.\nIntenta hacer clic en Run. No hay resultados porque no hemos marcado las variables y la salida del código.\n\n\n\n\n\n\nTip\n\n\n\nEn tu terminal, puedes ver una URL local.\n\nSi necesitas modificar tu código, presiona CTRL+C, esto detendrá la visualización.\n\n\n\n\n\n11.4.2 Parámetros de Entrada\nRecuerda que en el código elegimos los parámetros que queríamos graficar. Aquí lo haremos más interactivo.\nBusca la línea en tu código (CTRL+F)\n#List the parameters to plot\nparameters=['FFEspaciamiento','RqdRQD','CUS','MO','CUFE']\ny reemplaza por:\n#List the parameters to plot\nparameters = dropdown(\n 'Parameters',\n ['FFEspaciamiento', 'RqdRQD', 'CUS', 'MO', 'CUFE'],\n options='$data$.columns',\n multiple=True\n)\n::: {.callout-note} ::: {.callout-note} El primer parámetro de la función dropdown corresponde a la clave. El segundo parámetro son los parámetros preseleccionados, podrás modificarlos en la página web. El tercer parámetro: {.python}options='$data$.columns' hace referencia al conjunto de datos importado y nombrado data. :::\n\n\n11.4.3 Entrada de holeID\nReemplaza:\nholeid = 'SPD0412'  # Use the same hole ID for both lithology and assays\npor:\nholeid = dropdown('Selected holeid', 'SPD0412', options='$data$[\"holeid\"].unique()')\n\n\n11.4.4 Imagen de Salida\nReemplaza:\nplt.savefig('figure.png', dpi=300, bbox_inches='tight', pad_inches=0.1)\npor:\nplt.savefig(image_output('figure','figure.png', dpi=300, bbox_inches='tight', pad_inches=0.1))"
  },
  {
    "objectID": "StartCodingToday_Eng.html#pruebas-en-la-aplicación-web",
    "href": "StartCodingToday_Eng.html#pruebas-en-la-aplicación-web",
    "title": "Empieza a Programar Hoy: Crea Aplicaciones Web con Python y Onecode",
    "section": "11.5 Pruebas en la Aplicación Web",
    "text": "11.5 Pruebas en la Aplicación Web\n\nEjecutemos el código. En el terminal, ingresa:\n\nonecode-start\nPuedes visualizar los datos preseleccionados tanto para los parámetros como para el holeID.\n\n\nHaz clic en Run. En data podrás visualizar tus resultados."
  }
]